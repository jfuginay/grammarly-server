image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

stages:
  - test
  - build
  - deploy

# Cache dependencies between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

# Run tests
test:
  stage: test
  image: node:18-alpine
  script:
    - apk add --no-cache python3 make g++ openssl
    - npm ci
    - npm run test
  only:
    - main
    - merge_requests

# Build Docker image
build:
  stage: build
  image: docker:20.10.16
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

# Deploy to staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment"
    # Add your deployment commands here
    # For example, using curl to trigger a deployment webhook
    # - curl -X POST $STAGING_DEPLOY_WEBHOOK
  environment:
    name: staging
  only:
    - main
  when: manual

# Deploy to production
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment"
    # Add your deployment commands here
    # For example, using curl to trigger a deployment webhook
    # - curl -X POST $PRODUCTION_DEPLOY_WEBHOOK
  environment:
    name: production
  only:
    - main
  when: manual 